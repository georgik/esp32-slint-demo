import { Button, Button } from "std-widgets.slint";


struct ResultSet {
    key: string,
    value: string,
}

// Representation of physical card on the game board.
struct Card {
    id: string,
    image: image,
    is_face_up: bool,
    values: [ResultSet],
    x: int,
    y: int,
}


struct LevelData  {
    level_name: string,
    locked: bool,
    total_cards: int,
    cards_per_row: int,
    chain_length: int,
    card_set: [Card],
}

struct Board {
    cards: [Card],
}

export component MainWindow inherits Window {
    preferred-width: 480px;
    preferred-height: 480px;
    // Make current_view modifiable from within the UI.
    in-out property<string> current_view: "level_selector";

    callback flip_card(index: int);

    in property <[Card]> card_set: [
       {
           id: "cherry",
           image: @image-url("images/cherry.png"),
           values: [ { key: "en-US", value: "cherry" } ]
       },
       {
           id: "cheese",
           image: @image-url("images/cheese.png"),
           values: [ { key: "en-US", value: "cheese" } ]
       },
       {
            id: "carrot",
            image: @image-url("images/carrot.png"),
            values: [ { key: "en-US", value: "carrot" } ]
       },
        {
            id: "rose",
            image: @image-url("images/rose.png"),
            values: [ { key: "en-US", value: "rose" } ]
        },
        {
            id: "barrel",
            image: @image-url("images/barrel.png"),
            values: [ { key: "en-US", value: "barrel" } ]
        },
        {
            id: "ghost",
            image: @image-url("images/ghost.png"),
            values: [ { key: "en-US", value: "ghost" } ]
        },
        {
            id: "sun",
            image: @image-url("images/sun.png"),
            values: [ { key: "en-US", value: "sun" } ]
        },
        {
            id: "butterfly",
            image: @image-url("images/butterfly.png"),
            values: [ { key: "en-US", value: "butterfly" } ]
        },
        {
            id: "cloud",
            image: @image-url("images/cloud.png"),
            values: [ { key: "en-US", value: "cloud" } ]
        },
        {
          id: "dwarf",
          image: @image-url("images/dwarf.png"),
          values: [ { key: "en-US", value: "dwarf" } ]
        }
   ];
    // Level model: each entry must include a level_name.
    in property<[LevelData]> level_model: [
        { level_name: "1",
            locked: false ,
            cards_per_row: 2,
            chain_length: 2,
            card_set: card_set
        }
    ];

    // Board model: Randomly generated list of cards from card_set
    in property<Board> board_model: {
        cards: [
            {
              id: "cherry",
              image: @image-url("images/cherry.png"),
              is_face_up: false,
              values: [ { key: "en-US", value: "cherry" } ],
              x: 0,
              y: 80
            },
            {
                id: "cheese",
                image: @image-url("images/cheese.png"),
                is_face_up: false,
                values: [ { key: "en-US", value: "cheese" } ],
                x: 240,
                y: 80
            },
            {
                id: "dwarf",
                image: @image-url("images/dwarf.png"),
                is_face_up: false,
                values: [ { key: "en-US", value: "dwarf" } ],
                x: 0,
                y: 300
            },
            {
                id: "dwarf",
                image: @image-url("images/dwarf.png"),
                is_face_up: false,
                values: [ { key: "en-US", value: "dwarf" } ],
                x: 240,
                y: 300
            },

          ]
    };


    // LEVEL SELECTION PAGE:
    Rectangle {
        visible: current_view == "level_selector";
        background: rgb(255, 255, 224);
        width: parent.width;
        height: parent.height;
        VerticalLayout {
            spacing: 10px;
            padding: 20px;
            Text {
                text: "Select Level";
                font-size: 16px;
                horizontal-alignment: center;
                color: black;
                width: parent.width;
            }
            // For each level in the level model.
            HorizontalLayout {
                width: parent.width;
                height: parent.height;

                for level[index] in level_model:Button {
                    width: 40px;
                    height: 40px;
                    text: level.level_name;
                    clicked => { current_view = "game_play"; }
                }
            }
        }
    }

    // GAME BOARD PAGE:
    Rectangle {
        visible: current_view == "game_play";
        background: rgb(255, 255, 224);
        width: parent.width;
        height: parent.height;
        VerticalLayout {
            spacing: 10px;
            padding: 10px;
            height: parent.height;
            HorizontalLayout {
                spacing: 10px;
                // top bar unchanged
                height: 60px;
                Button {
                    text: "< Back";
                    clicked => { current_view = "level_selector"; }
                }
                Text {
                    // Display the level from the first card.
                    text: "Level: ";// + board_model[0].level_name;
                    font-size: 20px;
                    color: white;
                    horizontal-alignment: center;
                    // Use parent's width instead of self.width to avoid a binding loop.
                    width: parent.width - 100px;
                }
            }
        }
        for card[card_index] in board_model.cards: Rectangle {
            // Local flip state
            property<bool> face_up: false;
            // Scale down cards to 80% so they fit with top bar
            width: (((parent.width - 30px) / 2) * 4) / 5;
            height: (((parent.height - 100px) / 2) * 4) / 5;
            x: card.x * 1px;
            y: card.y * 1px;
            background: white;

            // Back face (question mark)
            Image {
                width: face_up ? 0px : parent.width;
                height: parent.height;
                source: @image-url("images/question.png");
                animate width { duration: 300ms; easing: ease-in-out; }
            }
            // Front face (card image)
            Image {
                width: face_up ? parent.width : 0px;
                height: parent.height;
                source: card.image;
                animate width {
                    duration: 300ms;
                    easing: ease-in-out;
                    delay: 300ms;
                }
            }
            TouchArea {
                width: parent.width;
                height: parent.height;
                clicked => { face_up = !face_up; }
            }
        }
    }
}
