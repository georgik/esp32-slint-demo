import { Button, Button } from "std-widgets.slint";


struct ResultSet {
    key: string,
    value: string,
}

// Representation of physical card on the game board.
struct Card {
    id: string,
    image: image,
    is_face_up: bool,
    values: [ResultSet]
}


struct LevelData  {
    level_name: string,
    locked: bool,
    total_cards: int,
    cards_per_row: int,
    chain_length: int,
    card_set: [Card],
}

struct Board {
    cards: [Card],
}

// Internal Card component for use in the game board.
component Card {
    // Input properties: card identifier, displayed face, and state.
    in property<string> card_id;
    in property<string> face;
    in property<string> state;
    // Callback invoked when the card is clicked.
    callback card_clicked();

    Rectangle {
        // Use a fixed card size.
        width: 80px;
        height: 80px;
        border-radius: 4px;
        border-width: 2px;
        border-color: gray;
        // Choose a background color based on state.
        property <color> background_color: state == "hidden" ? #444444 : state == "selected" ? #88ccee : #88ff88;
        background: background_color;

        Text {
            text: state == "hidden" ? "?" : face;
            // Center text using layout-provided alignment.
            horizontal-alignment: center;
            vertical-alignment: center;
            font-size: 20px;
            color: white;
            width: parent.width;
            height: parent.height;
        }

        // TouchArea provides the interactive region.
        TouchArea {
            width: parent.width;
            height: parent.height;
            clicked => { card_clicked(); }
        }
    }
}

export component MainWindow inherits Window {
    width: 320px;
    height: 240px;
    // Make current_view modifiable from within the UI.
    in-out property<string> current_view: "level_selector";

    in property <[Card]> card_set: [
       {
           id: "cherry",
           image: @image-url("images/cherry.png"),
           values: [ { key: "en-US", value: "cherry" } ]
       },
       {
           id: "cheese",
           image: @image-url("images/cheese.png"),
           values: [ { key: "en-US", value: "cheese" } ]
       },
       {
            id: "carrot",
            image: @image-url("images/carrot.png"),
            values: [ { key: "en-US", value: "carrot" } ]
       },
        {
            id: "rose",
            image: @image-url("images/rose.png"),
            values: [ { key: "en-US", value: "rose" } ]
        },
        {
            id: "barrel",
            image: @image-url("images/barrel.png"),
            values: [ { key: "en-US", value: "barrel" } ]
        },
        {
            id: "ghost",
            image: @image-url("images/ghost.png"),
            values: [ { key: "en-US", value: "ghost" } ]
        },
        {
            id: "sun",
            image: @image-url("images/sun.png"),
            values: [ { key: "en-US", value: "sun" } ]
        },
        {
            id: "butterfly",
            image: @image-url("images/butterfly.png"),
            values: [ { key: "en-US", value: "butterfly" } ]
        },
        {
            id: "cloud",
            image: @image-url("images/cloud.png"),
            values: [ { key: "en-US", value: "cloud" } ]
        },
        {
          id: "dwarf",
          image: @image-url("images/dwarf.png"),
          values: [ { key: "en-US", value: "dwarf" } ]
        }
   ];
    // Level model: each entry must include a level_name.
    in property<[LevelData]> level_model: [
        { level_name: "1",
            locked: false ,
            cards_per_row: 2,
            chain_length: 2,
            card_set: card_set
        }
    ];

    // Board model: Randomly generated list of cards from card_set
    in property<Board> board_model: {
        cards: [
            {
              id: "cherry",
              image: @image-url("images/cherry.png"),
              is_face_up: false,
              values: [ { key: "en-US", value: "cherry" } ]
            },
            {
                id: "cherry",
                image: @image-url("images/cherry.png"),
                is_face_up: true,
                values: [ { key: "en-US", value: "cherry" } ]
            },
            {
                id: "dwarf",
                image: @image-url("images/dwarf.png"),
                is_face_up: false,
                values: [ { key: "en-US", value: "dwarf" } ]
            },
            {
                id: "dwarf",
                image: @image-url("images/dwarf.png"),
                is_face_up: true,
                values: [ { key: "en-US", value: "dwarf" } ]
            },

          ]
    };


    // LEVEL SELECTION PAGE:
    Rectangle {
        visible: current_view == "level_selector";
        background: rgb(255, 255, 224);
        width: parent.width;
        height: parent.height;
        VerticalLayout {
            spacing: 10px;
            padding: 20px;
            Text {
                text: "Select Level";
                font-size: 16px;
                horizontal-alignment: center;
                color: black;
                width: parent.width;
            }
            // For each level in the level model.
            HorizontalLayout {
                width: parent.width;
                height: parent.height;

                for level[index] in level_model:Button {
                    width: 40px;
                    height: 40px;
                    text: level.level_name;
                    clicked => { current_view = "game_play"; }
                }
            }
        }
    }

    // GAME BOARD PAGE:
    Rectangle {
        visible: current_view == "game_play";
        background: rgb(255, 255, 224);
        width: parent.width;
        height: parent.height;
        VerticalLayout {
            spacing: 10px;
            padding: 10px;
            HorizontalLayout {
                spacing: 10px;
                Button {
                    text: "< Back";
                    clicked => { current_view = "level_selector"; }
                }
                Text {
                    // Display the level from the first card.
                    text: "Level: ";// + board_model[0].level_name;
                    font-size: 20px;
                    color: white;
                    horizontal-alignment: center;
                    // Use parent's width instead of self.width to avoid a binding loop.
                    width: parent.width - 100px;
                }
            }
            // Container for the grid of cards.
            HorizontalLayout {
                width: parent.width;
                height: parent.height;

                for card[index] in board_model.cards: Rectangle {
                    width: 40px;
                    height: 40px;

                    // Card container
                    Rectangle {
                        width: parent.width;
                        height: parent.height;

                        // Back face (question mark)
                        Image {
                            x: (parent.width - self.width) / 2;
                            width: card.is_face_up ? 0px : parent.width;
                            height: parent.height;
                            source: @image-url("images/question.png");
                            visible: self.width > 0;

                            animate width {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }

                        // Front face (card image)
                        Image {
                            x: (parent.width - self.width) / 2;
                            width: card.is_face_up ? parent.width : 0px;
                            height: parent.height;
                            source: card.image;
                            visible: self.width > 0;

                            animate width {
                                duration: 300ms;
                                easing: ease-in-out;
                                delay: 300ms;  // Start after back face animation completes
                            }
                        }
                    }

                    TouchArea {
                        width: parent.width;
                        height: parent.height;
                        clicked => {
                            if (!card.is_face_up) {
                                card.is_face_up = true;
                            }
                        }
                    }
                }

            }
        }
    }
}
